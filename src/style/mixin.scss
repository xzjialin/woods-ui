@use 'sass:math';
$namespace: 's' !default;
$state-prefix: 'is-' !default;
@mixin when($state) {
    @at-root {
      &.#{$state-prefix + $state} {
        @content;
      }
    }
  }

@mixin col-size($size) {
    
      .#{$namespace}-col-#{$size}-0 {
        display: none;
        @include when(guttered) {
            display: none;
          }
      
      @for $i from 0 through 24 {
        .#{$namespace}-col-#{$size}-#{$i} {
          @if $i != 0 {
            display: block;
          }
          max-width: (math.div(1, 24) * $i * 100) * 1%;
          flex: 0 0 (math.div(1, 24) * $i * 100) * 1%;
        }
  
        .#{$namespace}-col-#{$size}-offset-#{$i} {
          margin-left: (math.div(1, 24) * $i * 100) * 1%;
        }
  
        .#{$namespace}-col-#{$size}-pull-#{$i} {
          position: relative;
          right: (math.div(1, 24) * $i * 100) * 1%;
        }
  
        .#{$namespace}-col-#{$size}-push-#{$i} {
          position: relative;
          left: (math.div(1, 24) * $i * 100) * 1%;
        }
      }
    }
  }


  @mixin tag-variant($variant, $pseudo: false) {
    @each $key, $value in $variant {
      // 第一层是多态的类型
      &.s-tag--#{$key} {
        @each $item-key, $item-value in $value {
          // 第二层是多态类型下的样式
          @if $pseudo {
            // 如果是伪类就继续第三层
            &:#{$item-key} {
              @each $sub-item-key, $sub-item-value in $item-value {
                // 第三层是伪类的样式
                #{$sub-item-key}: $sub-item-value;
              }
            }
          } @else {
            // 不是伪类就直接设置样式
            #{$item-key}: $item-value;
          }
        }
      }
    }
  }


